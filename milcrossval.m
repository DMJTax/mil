%MILCROSSVAL MIL crossvalidation
%
%     [Y,Z,I,Itrn,Itst] = MILCROSSVAL(X,I)
%
% INPUT
%    X           MIL-dataset
%    I           Number of folds/object identifier for each fold
%
% OUTPUT
%    Y           Train MIL-dataset
%    Z           Test MIL-dataset
%    I           Updated object identifier for each fold.
%    Itrn,Itst   Indices of the training and test set
%
% DESCRIPTION
% Perform stratified crossvalidation over the bags in dataset X.  I
% contains the number of bags. The function outputs the training set Y
% and test set Z.  Furthermore, it outputs I again, now containing the
% indices of the fold each object belongs to and how many folds have
% been extracted.
%
% A typical use would look like:
% >> I = 5;  5-fold crossvalidation
% >> for i=1:5
% >>    [x,z,I] = milcrossval(a,I);
% >>    % train something on X
% >>    % evaluate on Z
% >> end
%
% When requested, you can receive the indices of the training objects
% and the test objects. You can receive the two sets by:
% >> Y = X(Itrn,:);  Z = X(Itst,:);
% To get the bag indices BAGID of the dataset X, you can do:
% >> [bags,lab,bagID] = getbags(X)
%
% The dataset X should be a valid MIL dataset (easily generated by
% genmil). The bags should be indicated by the identifier 'milbag'.
%
% SEE ALSO
% GENMIL, LABELBAG, GETBAGS

% Copyright: D.M.J. Tax, D.M.J.Tax@prtools.org
% Faculty EWI, Delft University of Technology
% P.O. Box 5031, 2600 GA Delft, The Netherlands
function [y,z,I,Itr,Its] = milcrossval(x,I)

if (nargin<2)
	error('I or nrfolds should be given!');
end
if length(I)==1
	nrfolds = I; I = [];
end
% define another constant than in dd_crossval:
xvalconst = 170.673;

% Check if the coding vector I is already defined
if ~isempty(I) % is already defined, go for the next bag.
	if (I(5)~=xvalconst)
		error('Sorry, I has not the right format.');
	end
	I(2) = I(2) + 1; % goto next bag
	if (I(2)>I(1))
		warning('mil:crossval:IllegalFoldNr','Maximal number of bags is extracted.');
	end
else % Create a vector I to code for the bags
	copymethod = getmilinfo(x,'combinerule');
	if isempty(copymethod)
		warning('This MIL dataset does not have a combining rule defined');
	end
	if strcmp(copymethod,'individual')
		% we do stratified crossvalidation on the *current objects*
		nrx = size(x,1);
		c = size(getlablist(x),1);
		if (c>1)
			% Consider each class separately, to force that all classes are
			% represented as best as possible
			% Setup the variables:
			lab = getnlab(x);
			n = zeros(1,c);
			for i=1:c
				Iset{i} = find(lab==i);
				n(i) = length(Iset{i});
				if (n(i)<nrfolds)
					warning('mil:crossval:InsufficientObjectsPerClass',...
						'Not enough samples per class, some bags lack objects from class %d.',i)
				end
			end
			% Now fill the fold sets (use the trick by Cor Veenman):
			cur = ones(1,c);
			for i=1:nrfolds
				Ibag{i} = [];
				% take objects from each of the sets:
				for j=1:c
					% compute the nr of objects to select
					nr = floor(n(j)/(nrfolds-i+1));
					% select the j-th fold
					Ibag{i} = [Ibag{i};
								  Iset{j}(cur(j):cur(j)+nr-1)];
					% move the cur-pointer to the next set
					cur(j) = cur(j)+nr;
					% and update the remaining class sizes
					n(j) = n(j)-nr;
				end
			end
		else
			% there are no clas labels defined!
			warning('No classlabels for bags defined. Stratified crossval IMpossible.');
			J = mod((1:nrx)'+1,nrfolds)+1;
			for i=1:nrfolds
				Ibag{i} = find(J==i);
			end
		end
		% now fill the indices:
		I = zeros(nrx,1);
		for i=1:nrfolds
			I(Ibag{i}) = i;
		end
			
		% Encode the rest:
		I = [zeros(5,1); I];
		I(5) = xvalconst;  %Magic code;-)
		I(1) = nrfolds;
		I(2) = 1;      % number of active bag
	else
		% We want to do crossvalidation over bags, defined in the MIL
		% dataset. But we don't need the actual contents of the bags :)
		        
      [baglab,bagid,Ibag] = getbaglabs(x);
      baglen = size(baglab,1);
               
        
		Iobjs = prdataset((1:baglen)',baglab);
		Iobjs = setmilinfo(Iobjs,'combrule','individual');
		% do a crossvalidation over these objects:
		[dummy1,dummy2,J] = milcrossval(Iobjs,nrfolds);
		% extract the batchnrs, and fill them back in the original
		% objects:
		J = J(6:end);
		I = zeros(size(x,1),1);
		for i=1:baglen
			I(Ibag{i}) = J(i);
		end
		% pack it again...
		I = [nrfolds; 1; 0; 0; xvalconst; I];
	end
end

% Extract the correct data given the I:
J = I(6:end);
Itr = find(J~=I(2));
y = x(Itr,:);
Its = find(J==I(2));
z = x(Its,:);

% One security check:
if nargout<3
	warning('mil:crossval:XvalIndexLost',...
		'You probably want to use the index vector I for the next time!');
end

% Useful for inspection purposes:
if isdataset(y)
	y = setname(y,[getname(y),' (Xval trn)']);
	z = setname(z,[getname(z),' (Xval tst)']);
end
% To avoid annoying warnings later? Shouldn't it be set correctly by the
% extraction of the datasets?
x = setprior(x,getprior(x,0));
z = setprior(z,getprior(z,0));

return
